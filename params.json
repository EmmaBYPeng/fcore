{"name":"fcore","tagline":"Research middleware compiler from System F-based languages to Java with the Imperative Functional Object encoding","body":"# F2J: A Compiler for FCore\r\n[![Build Status](https://travis-ci.org/hkuplg/fcore.svg?branch=develop)](https://travis-ci.org/hkuplg/fcore)\r\n\r\n## Building from Source\r\n\r\nThe following instructions should work on any platform, from OS X to\r\nUbuntu. It builds the compiler from source, thus may take some time.\r\n\r\n1. Install the [Haskell Platform](https://www.haskell.org/platform/).\r\n\r\n2. Clone the [source] with [git]:\r\n\r\n   ```bash\r\n   git clone https://github.com/hkuplg/fcore.git\r\n   cd fcore\r\n   ```\r\n[source]: https://github.com/hkuplg/fcore\r\n[git]: http://git-scm.com/\r\n\r\n3. Build an install:\r\n\r\n   ```bash\r\n   cabal update\r\n   make\r\n   ```\r\n\r\n4. After the installation, invoking `f2j` in your console will show\r\n   its usage. If not, you probably want to add `.cabal/bin` to your\r\n   `$PATH`.\r\n\r\n\r\n## Compilation Methods\r\n\r\nF2j has a few built-in compilation methods (by default, it doesn't use\r\nany optimization), namely `apply`, `stack` and `unbox`.\r\n\r\n+ Apply: multi-argument optimization\r\n+ Stack: tail call elimination\r\n+ Unbox: auto-unboxing optimization\r\n\r\nTo use one or more of them, simply append the compilation methods you\r\nwant to use as the command line arguments.\r\n\r\nFor example, say you want to use the `apply` method, running the\r\nfollowing command:\r\n\r\n    f2j -m apply some_file\r\n\r\nIf you want to combine different methods (say, `apply` and `stack`),\r\njust type:\r\n\r\n    f2j -m apply -m stack some_file\r\n\r\nFinally, passing `-r` flag will make the compiler compile and run the\r\ngenerated Java code.\r\n\r\n## REPL\r\n\r\nThere is also a REPL at your service. Simply invoking `f2ji` will take\r\nyou to the REPL.\r\n\r\n## Examples\r\n\r\nIn the `example` directory, you will see a lot of example programs\r\nwritten in FCore. You may want to take a look at them to get familiar\r\nwith the syntax. These examples demonstrate different features of our\r\ncompiler, such as call-by-name, record syntax, modules, thunk, type\r\nsynonyms, etc.\r\n\r\nParticularly, in `examples/fractals`, there is an interesting program\r\nthat draws a fractal.\r\n\r\n## Troubleshooter\r\n\r\nIf you run into any problem, try to do\r\n\r\n    make clean\r\n\r\nand then\r\n\r\n     make\r\n\r\nIf the problem persists, create an issue!\r\n\r\n## License\r\n\r\nBSD3\r\n\r\nSee `LICENSE` at the top-level directory for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}