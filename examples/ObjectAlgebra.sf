type ExpAlg E = {
  lit : Int -> E,
  add : E -> E -> E
};
let evalAlg = {
  lit = \(x : Int). x,
  add = \(x : Int). \(y : Int). x + y
};
type SubExpAlg E = (ExpAlg E) & {
  sub : E -> E -> E
};
let subEvalAlg = evalAlg ,, {
  sub = \(x : Int). \(y : Int). x + y
};
let exp1 E (alg : ExpAlg E)    = alg.lit 5;
let exp2 E (alg : SubExpAlg E) = alg.sub (exp1 E) (alg.lit 2);
exp2 Int subEvalAlg