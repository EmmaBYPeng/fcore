let maxIter : Int = 127 in
let rec mandelbrot (c : hk.hku.cs.f2j.Complex) (z : hk.hku.cs.f2j.Complex) (i : Int) : Int =
  if i > maxIter
     then 0
     else
     {
       let zz = z.sqr().add(c) in
       if zz.magnitude() > java.lang.Double.valueOf("2")
          then i
          else mandelbrot c zz (i + 1)
     }
and ship (c : hk.hku.cs.f2j.Complex) (z : hk.hku.cs.f2j.Complex) (i : Int) : Int =
  if i > maxIter
     then 0
     else
     {
       let zz = z.abs().sqr().add(c) in
       if zz.magnitude() > java.lang.Double.valueOf("2")
          then i
          else ship c zz (i + 1)
     }
and colorOf (func : hk.hku.cs.f2j.Complex -> hk.hku.cs.f2j.Complex -> Int -> Int) (x : Int) (y : Int) : java.awt.Color =
  let t = func hk.hku.cs.f2j.PlotWindow.toComplex(x, y) hk.hku.cs.f2j.Complex.ZERO 0 in
  if t > maxIter
     then new java.awt.Color(255, 255, 255)
     else new java.awt.Color(t * 2, t, t)
and setColor (x : Int) (y : Int) (c : java.awt.Color) : Int = hk.hku.cs.f2j.PlotWindow.setRGBColor(x, y, c)
and draw (func : hk.hku.cs.f2j.Complex -> hk.hku.cs.f2j.Complex -> Int -> Int) (x : Int) (y : Int) (dummy : Int) : Int =
  if x == 600
     then 0
     else if y == 600
             then (draw func) (x + 1) 0 0
             else draw func x (y + 1) (setColor x y (colorOf func x y))
  in
  {
    hk.hku.cs.f2j.PlotWindow.create(-190, 130, 70, -130);
    draw mandelbrot 0 0 0;
    --hk.hku.cs.f2j.PlotWindow.create(-180, 2, -170, -8);
    --draw ship 0 0 0;
    True
  }
