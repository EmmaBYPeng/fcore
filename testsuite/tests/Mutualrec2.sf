-- Intention

-- let rec even (n : Int) : Int = if0 n then 1 else if0 n-1 then 0 else odd  (n-1)
-- and     odd  (n : Int) : Int = if0 n then 0 else if0 n-1 then 1 else even (n-1) 
-- in
-- odd 7

-- System F code: not parsing:

-- let rec evenodd (dummy : Int) : (Int -> Int, Int -> Int) =
--     (\(n : Int) . if0 n then 1 else evenodd._1 0 (n-1), \(n : Int) . if0 n then 0 else evenodd._0 0 (n-1))
-- in
-- evenodd._1 0 7

-- Valid OCaml code

-- let rec evenodd (dummy : int) : ((int -> int) * (int -> int)) =
--  ( (fun (n : int) -> if n = 0 then 1 else if n-1 = 0 then 0 else (fst (evenodd 88)) (n-1))
--  , (fun (n : int) -> if n = 0 then 1 else if n-1 = 0 then 0 else (fst (evenodd 88)) (n-1))
--  )
-- in
-- (fst (evenodd 88)) 7;;

let rec evenodd (dummy : Int) : (Int -> Int, Int -> Int) =
    ( \(n : Int). if n == 0 then 1 else if n == 1 then 0 else (evenodd 88)._1 (n-1)
    , \(n : Int). if n == 0 then 0 else if n == 1 then 1 else (evenodd 88)._2 (n-1)
    )
in
(evenodd 88)._1 7
